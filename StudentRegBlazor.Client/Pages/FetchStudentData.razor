@page "/fetchstudentdata"
@using StudentRegBlazor.Shared
@inject HttpClient Http
@inject IUriHelper uriHelper
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>Student List</h1>

<div class="input-group mb-3">
    <input type="text" class="form-control" name="item" bind="@Id" placeholder="Filter by Student Id.." />
    <div class="input-group-append">
        <button class="btn btn-outline-primary" type="button" onclick=@(() =>  RefreshStudentListSearch())>Search</button>
        <button class="btn btn-outline-primary" type="button" onclick=@(async () => await RefreshStudentList())>Refresh</button>
    </div>
</div>

<button class="btn btn-outline-primary" data-toggle="modal" onclick="@CheckOperation" data-target="#AddEditEmpModal">
    <i class="fa fa-user-plus"></i>
    Add Student
</button>

<p>@name</p>
<br />

<br />



<div class="modal fade" id="AddEditEmpModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">@param</h3>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">X</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label>Student ID</label>
                        <input type="text" class="form-control" bind="@stu.Id" />
                    </div>
                    <div class="form-group">
                        <label>First Name</label>
                        <input type="text" class="form-control" bind="@stu.FirstName" />
                    </div>
                    <div class="form-group">
                        <label>Middle Initial</label>
                        <input type="text" class="form-control" bind="@stu.Mi" />
                    </div>
                    <div class="form-group">
                        <label>Last Name</label>
                        <input type="text" class="form-control" bind="@stu.LastName" />
                    </div>
                    <div class="form-group">
                        <label>Birthdate</label>
                        <input type="date" format-value="yyyy-MM-dd" class="form-control" bind="@stu.Birthdate" />
                    </div>
                    <div class="form-group">
                        <label>Address</label>
                        <input type="text" class="form-control" id="Address" bind="@stu.Address" />
                    </div>
                    <div class="form-group">
                        <label>Email Address</label>
                        <input type="email" class="form-control" id="Email" bind="@stu.Email" />
                    </div>
                    <div class="form-group">
                        <label>User Name</label>
                        <input type="text" class="form-control" id="UserName" bind="@stu.UserName" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <input type="password" class="form-control" id="Password" bind="@stu.Password" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">

                <button class="@paramButton" onclick="@(async () => await HandleValidSubmit())" data-dismiss="modal">@paramText</button>

            </div>
        </div>
    </div>
</div>

@*btn btn-block btn-success*@



@if (studentlist == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>StudentId</th>
                <th>First Name</th>
                <th>M.I</th>
                <th>Last Name</th>
                <th>Birth Date</th>
                <th>Address</th>
                <th>Email Address</th>
                <th></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var student in studentlist)
            {
            <tr>
                <td>@student.Id</td>
                <td>@student.FirstName</td>
                <td>@student.Mi</td>
                <td>@student.LastName</td>
                <td>@student.Birthdate.ToShortDateString()</td>
                <td>@student.Address</td>
                <td>@student.Email</td>
                <td>
                    <button class="btn btn-outline-dark" data-toggle="modal" data-target="#AddEditEmpModal"
                            onclick="@(  () => EditStudent(@student.Id))">
                        <i class="fa fa-pencil-square-o"></i>
                        Edit
                    </button>
                    <button class="btn btn-outline-danger" data-toggle="modal" data-target="#AddEditEmpModal"
                            onclick="@(  () => DeleteStudent(@student.Id))">
                        <i class="fa fa-trash-o"></i>
                        Delete
                    </button>
                </td>

            </tr>
            }
        </tbody>
    </table>
}

@functions {
    [Parameter]
    private string Id { get; set; }

     [Parameter]
    private string name { get; set; }

    [Parameter]
    private string param { get; set; }

    [Parameter]
    private string paramButton { get; set; }

    [Parameter]
    private string paramText { get; set; }

    private StudentShared stu { get; set; } = new StudentShared();

    StudentShared[] studentlist;

   




    private async Task RefreshStudentList()
    {
        studentlist = await Http.GetJsonAsync<StudentShared[]>("api/Student/StudentList");
    }


    private void RefreshStudentListSearch()
    {
        //var ss = await Http.GetJsonAsync<StudentShared[]>("api/Student/StudentList");
        var dd = from s in studentlist
                 where s.Id == Id
                 select s;
        studentlist = dd.ToArray();

    }

    protected async Task HandleValidSubmit()
    {
        if (param == "Add Student")
        {
            await Http.PostJsonAsync("http://localhost:56834/api/Student/Create", stu);
        }
        else if (param == "Edit Student")
        {
            await Http.PutJsonAsync("http://localhost:56834/api/Student/Edit", stu);
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Delete, "http://localhost:56834/api/Student/Delete", stu);
        }

        //uriHelper.NavigateTo("fetchstudentdata");
        await RefreshStudentList();
    }

    protected void CheckOperation()
    {
        stu = new StudentShared();
        param = "Add Student";
        paramButton = "btn btn-outline btn-success";
        paramText = "Save";
    }

    private void EditStudent(string Idparam)
    {
        //var ss = await Http.GetJsonAsync<StudentShared[]>("api/Student/StudentList");
        StudentShared[] studenEdit;

        var dd = from s in studentlist
                 where s.Id == Idparam
                 select s;
        studenEdit = dd.ToArray();

        stu = new StudentShared
        {
            Id = studenEdit[0].Id,
            FirstName = studenEdit[0].FirstName,
            Mi = studenEdit[0].Mi,
            LastName = studenEdit[0].LastName,
            Birthdate = studenEdit[0].Birthdate,
            Address = studenEdit[0].Address
        };

        paramButton = "btn btn-outline btn-success";

        param = "Edit Student";
        paramText = "Save";
    }


    private void DeleteStudent(string Idparam)
    {
        StudentShared[] studenEdit;

        var dd = from s in studentlist
                 where s.Id == Idparam
                 select s;
        studenEdit = dd.ToArray();

        stu = new StudentShared
        {
            Id = studenEdit[0].Id,
            FirstName = studenEdit[0].FirstName,
            Mi = studenEdit[0].Mi,
            LastName = studenEdit[0].LastName,
            Birthdate = studenEdit[0].Birthdate,
            Address = studenEdit[0].Address
        };
        paramButton = "btn btn-outline-danger";
        param = "Delete Student";
        paramText = "Delete";

    }
}
